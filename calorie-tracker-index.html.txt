<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Calorie Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-image: url('https://images.unsplash.com/photo-1542838132-92c53300491e?q=80&w=2574&auto=format&fit=crop');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
        }
        .nav-background {
             background-image: linear-gradient(rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.9)), url('https://images.unsplash.com/photo-1495521821757-a1efb6729352?q=80&w=2526&auto=format&fit=crop');
            background-size: cover;
            background-position: center;
        }
        .drop-zone {
            border: 2px dashed #cbd5e1;
            transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
            background-color: #f8fafc;
            background-image: linear-gradient(rgba(248, 250, 252, 0.85), rgba(248, 250, 252, 0.85)), url('https://images.unsplash.com/photo-1498837167922-ddd27525d352?q=80&w=2670&auto=format&fit=crop');
            background-size: cover;
            background-position: center;
        }
        .drop-zone.drag-over {
            background-color: #e2e8f0;
            border-color: #94a3b8;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .analysis-card {
            background-image: linear-gradient(rgba(255, 255, 255, 0.92), rgba(255, 255, 255, 0.92)), url('https://images.unsplash.com/photo-1490645935967-10de6ba17021?q=80&w=2653&auto=format&fit=crop');
            background-size: cover;
            background-position: center;
        }
        @keyframes pulse {
            0%, 100% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.1);
                opacity: 0.8;
            }
        }
        .mic-listening {
            animation: pulse 2s infinite ease-in-out;
        }
        .footer-background {
            background-color: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(5px);
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen p-4 pt-24 flex flex-col">
    
    <nav class="nav-background backdrop-blur-sm shadow-md fixed top-0 left-0 right-0 z-40">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex items-center justify-between h-16">
                <div class="flex items-center">
                    <div class="flex-shrink-0 text-2xl font-bold text-blue-600">
                        NutriTrack AI
                    </div>
                </div>
                <div class="hidden md:block">
                    <div class="ml-10 flex items-baseline space-x-4">
                        <a href="#" class="text-gray-700 hover:bg-blue-500 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Home</a>
                        <a href="#" class="text-gray-700 hover:bg-blue-500 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Features</a>
                        <a href="#" class="text-gray-700 hover:bg-blue-500 hover:text-white px-3 py-2 rounded-md text-sm font-medium transition-colors">Contact</a>
                        <a href="#" class="bg-orange-500 text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-orange-600 transition-colors">Premium</a>
                    </div>
                </div>
                <div class="-mr-2 flex md:hidden">
                    <button id="mobile-menu-button" type="button" class="bg-gray-200 inline-flex items-center justify-center p-2 rounded-md text-gray-600 hover:text-gray-800 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-200 focus:ring-white">
                        <span class="sr-only">Open main menu</span>
                        <svg id="hamburger-icon" class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        </svg>
                        <svg id="close-icon" class="hidden h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>
        <!-- Mobile menu, show/hide based on menu state. -->
        <div class="md:hidden hidden" id="mobile-menu">
            <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
                <a href="#" class="text-gray-700 hover:bg-blue-500 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">Home</a>
                <a href="#" class="text-gray-700 hover:bg-blue-500 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">Features</a>
                <a href="#" class="text-gray-700 hover:bg-blue-500 hover:text-white block px-3 py-2 rounded-md text-base font-medium transition-colors">Contact</a>
                <a href="#" class="bg-orange-500 text-white block px-3 py-2 rounded-md text-base font-medium hover:bg-orange-600 transition-colors">Premium</a>
            </div>
        </div>
    </nav>
    <div class="flex-grow">
        <div class="w-full max-w-2xl mx-auto bg-white/95 backdrop-blur-sm rounded-2xl shadow-lg p-6 md:p-8">
            
            <header class="text-center mb-6">
                <h1 class="text-3xl md:text-4xl font-bold text-gray-800">AI Calorie Tracker</h1>
                <p class="text-gray-500 mt-2">Analyze your meal with a photo or by voice.</p>
            </header>
    
            <main>
                <!-- Input Selection Section -->
                <div id="upload-section">
                    <div id="drop-zone" class="drop-zone rounded-lg p-8 text-center">
                        <div class="flex flex-col items-center">
                            <svg class="w-16 h-16 text-gray-400 mb-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
                            </svg>
                            <p class="text-gray-600 font-medium">Drag & drop an image here</p>
                            <p class="text-gray-500 text-sm">or</p>
                            <div class="flex flex-col sm:flex-row flex-wrap justify-center gap-2 mt-2">
                                 <button id="browse-btn" type="button" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                                    Browse Files
                                </button>
                                <button id="camera-btn" type="button" class="bg-indigo-500 hover:bg-indigo-600 text-white font-bold py-2 px-4 rounded-lg transition-colors flex items-center justify-center">
                                    <svg class="w-5 h-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                      <path stroke-linecap="round" stroke-linejoin="round" d="M6.827 6.175A2.31 2.31 0 015.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 00-1.134-.175 2.31 2.31 0 01-1.64-1.055l-.822-1.316a2.192 2.192 0 00-1.736-1.039 48.776 48.776 0 00-5.232 0 2.192 2.192 0 00-1.736 1.039l-.821 1.316z" />
                                      <path stroke-linecap="round" stroke-linejoin="round" d="M16.5 12.75a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zM18.75 10.5h.008v.008h-.008V10.5z" />
                                    </svg>
                                    Use Camera
                                </button>
                                <button id="voice-btn" type="button" class="bg-teal-500 hover:bg-teal-600 text-white font-bold py-2 px-4 rounded-lg transition-colors flex items-center justify-center">
                                    <svg class="w-5 h-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                      <path stroke-linecap="round" stroke-linejoin="round" d="M12 18.75a6 6 0 006-6v-1.5m-6 7.5a6 6 0 01-6-6v-1.5m6 7.5v3.75m-3.75 0h7.5M12 15.75a3 3 0 01-3-3V4.5a3 3 0 016 0v8.25a3 3 0 01-3 3z" />
                                    </svg>
                                    Use Voice
                                </button>
                            </div>
                             <div id="voice-support-warning" class="w-full"></div>
                        </div>
                    </div>
                    <input type="file" id="file-input" class="hidden" accept="image/png, image/jpeg, image/webp">
                </div>
    
                <!-- Image Preview Section -->
                <div id="preview-section" class="hidden text-center">
                    <div class="relative inline-block">
                        <img id="image-preview" src="#" alt="Image preview" class="max-w-full max-h-80 mx-auto rounded-lg shadow-md">
                        <button id="remove-image-btn" class="absolute top-2 right-2 bg-white rounded-full p-1.5 shadow-md hover:bg-gray-200 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                    <button id="analyze-btn" class="mt-6 w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-lg transition-colors text-lg flex items-center justify-center disabled:bg-gray-400 disabled:cursor-not-allowed">
                        <svg class="w-6 h-6 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                           <path stroke-linecap="round" stroke-linejoin="round" d="M9.75 3.104v5.714a2.25 2.25 0 01-.659 1.591L5 14.5M9.75 3.104c.251.023.501.05.75.082a.75.75 0 01.75.75v5.714a2.25 2.25 0 00.659 1.591L14.25 14.5M9.75 3.104a6.375 6.375 0 00-4.252 1.406M14.25 14.5c-.623.237-1.28.384-1.975.468a.75.75 0 01-.75-.75V3.182c0-.374.22-.698.547-.862a6.375 6.375 0 014.252 1.406M14.25 14.5L19.5 19.5" />
                        </svg>
                        Analyze Meal
                    </button>
                </div>
    
                <!-- Results Section -->
                <div id="results-section" class="hidden mt-6">
                    <!-- Loading State -->
                    <div id="loading-state" class="text-center p-6 hidden">
                        <div class="loader mx-auto"></div>
                        <p class="text-gray-600 mt-4 text-lg">Analyzing your meal... This might take a moment.</p>
                    </div>
                    
                    <!-- Error Message -->
                    <div id="error-message" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative" role="alert">
                        <strong class="font-bold">Oops!</strong>
                        <span class="block sm:inline" id="error-text"></span>
                    </div>
    
                    <!-- Results Display -->
                    <div id="results-display" class="hidden">
                        <h2 class="text-2xl font-bold text-gray-800 mb-4 text-center">Nutritional Analysis</h2>
                        <div class="analysis-card rounded-lg p-4">
                            <div class="text-center mb-6">
                                <p class="text-lg text-gray-600">Total Estimated Calories</p>
                                <p id="total-calories" class="text-5xl font-bold text-blue-600">0</p>
                            </div>
    
                            <!-- Macronutrients -->
                            <div class="grid grid-cols-3 gap-4 text-center mb-6 px-2">
                                <div>
                                    <p class="text-sm font-semibold text-rose-600">Protein</p>
                                    <p id="total-protein" class="text-2xl font-bold text-gray-800">0g</p>
                                </div>
                                <div>
                                    <p class="text-sm font-semibold text-amber-600">Carbs</p>
                                    <p id="total-carbs" class="text-2xl font-bold text-gray-800">0g</p>
                                </div>
                                <div>
                                    <p class="text-sm font-semibold text-sky-600">Fat</p>
                                    <p id="total-fat" class="text-2xl font-bold text-gray-800">0g</p>
                                </div>
                            </div>
    
                            <div class="flow-root">
                                <ul id="ingredients-list" role="list" class="divide-y divide-gray-200">
                                    <!-- Ingredient items will be injected here -->
                                </ul>
                            </div>
                        </div>
                        <div class="mt-4 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded-md" role="alert">
                            <p class="font-bold">Disclaimer</p>
                            <p id="disclaimer" class="text-sm"></p>
                        </div>
                         <button id="reset-btn" class="mt-6 w-full bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                            Analyze Another Meal
                        </button>
                    </div>
                </div>
            </main>
        </div>
    </div>


    <!-- Camera Modal -->
    <div id="camera-modal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-80 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-2xl shadow-xl w-full max-w-lg p-4 relative">
            <h3 class="text-xl font-bold text-center mb-4 text-gray-800">Live Camera</h3>
            <div class="bg-gray-200 rounded-lg overflow-hidden">
                <video id="camera-stream" class="w-full h-auto" autoplay playsinline></video>
            </div>
            <canvas id="camera-canvas" class="hidden"></canvas>
            <div class="mt-4 flex flex-col sm:flex-row gap-2 justify-center">
                <button id="capture-btn" class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-lg transition-colors flex items-center justify-center text-lg">
                    <svg class="w-6 h-6 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6.827 6.175A2.31 2.31 0 015.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 00-1.134-.175 2.31 2.31 0 01-1.64-1.055l-.822-1.316a2.192 2.192 0 00-1.736-1.039 48.776 48.776 0 00-5.232 0 2.192 2.192 0 00-1.736 1.039l-.821 1.316z" />
                        <path stroke-linecap="round" stroke-linejoin="round" d="M16.5 12.75a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zM18.75 10.5h.008v.008h-.008V10.5z" />
                    </svg>
                    Capture Photo
                </button>
            </div>
             <button id="close-camera-btn" class="absolute top-2 right-2 bg-white rounded-full p-1.5 shadow-md hover:bg-gray-200 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
    </div>

    <!-- Voice Input Modal -->
    <div id="voice-modal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-80 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-2xl shadow-xl w-full max-w-lg p-6 relative text-center">
            <h3 class="text-xl font-bold mb-4 text-gray-800">Describe Your Meal</h3>
            <div class="mb-4">
                <div id="mic-animation" class="w-24 h-24 mx-auto rounded-full bg-blue-500 flex items-center justify-center transition-transform">
                    <svg class="w-12 h-12 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 18.75a6 6 0 006-6v-1.5m-6 7.5a6 6 0 01-6-6v-1.5m6 7.5v3.75m-3.75 0h7.5M12 15.75a3 3 0 01-3-3V4.5a3 3 0 016 0v8.25a3 3 0 01-3 3z" />
                    </svg>
                </div>
                <p id="voice-status" class="text-gray-600 mt-4 text-lg">Listening...</p>
            </div>
            <div class="min-h-[6rem] bg-gray-100 rounded-lg p-3 text-left">
                <span id="transcript" class="text-gray-800 font-medium"></span>
                <span id="interim-transcript" class="text-gray-500"></span>
            </div>
            <button id="close-voice-btn" class="absolute top-2 right-2 bg-white rounded-full p-1.5 shadow-md hover:bg-gray-200 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <p class="text-xs text-gray-400 mt-4">Simply stop speaking to finish and analyze.</p>
        </div>
    </div>

    <footer class="footer-background mt-12 py-8 px-4 text-center text-gray-600">
        <div class="max-w-7xl mx-auto">
            <div class="flex justify-center space-x-6 mb-4">
                <a href="#" class="text-gray-500 hover:text-blue-600 transition-colors">
                    <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path fill-rule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clip-rule="evenodd" />
                    </svg>
                </a>
                <a href="#" class="text-gray-500 hover:text-blue-600 transition-colors">
                     <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.71v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
                    </svg>
                </a>
                 <a href="#" class="text-gray-500 hover:text-blue-600 transition-colors">
                    <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path fill-rule="evenodd" d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.024.06 1.378.06 3.808s-.012 2.784-.06 3.808c-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427-.465-1.024.048-1.378.06-3.808.06s-2.784-.013-3.808-.06c-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.048-1.024-.06-1.378-.06-3.808s.012-2.784.06-3.808c.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 016.345 2.525c.636-.247 1.363-.416 2.427-.465C9.792 2.013 10.146 2 12.315 2zM12 7a5 5 0 100 10 5 5 0 000-10zm0-2a7 7 0 110 14 7 7 0 010-14zm6.406-2.406a1.44 1.44 0 100 2.88 1.44 1.44 0 000-2.88z" clip-rule="evenodd" />
                    </svg>
                </a>
            </div>
            <div class="text-sm text-gray-500">
                <a href="#" class="hover:text-blue-600 transition-colors">Privacy Policy</a>
                <span class="mx-2">&middot;</span>
                <a href="#" class="hover:text-blue-600 transition-colors">Terms of Service</a>
            </div>
            <p class="mt-4 text-sm">&copy; 2025 NutriTrack AI. All rights reserved.</p>
            <p class="mt-2 text-xs text-gray-400">New Town, West Bengal, India</p>
        </div>
    </footer>

    <script>
        // --- DOM Element Selection ---
        const dropZone = document.getElementById('drop-zone');
        const fileInput = document.getElementById('file-input');
        const browseBtn = document.getElementById('browse-btn');
        const uploadSection = document.getElementById('upload-section');
        const previewSection = document.getElementById('preview-section');
        const imagePreview = document.getElementById('image-preview');
        const removeImageBtn = document.getElementById('remove-image-btn');
        const analyzeBtn = document.getElementById('analyze-btn');
        const resultsSection = document.getElementById('results-section');
        const loadingState = document.getElementById('loading-state');
        const errorMessage = document.getElementById('error-message');
        const errorText = document.getElementById('error-text');
        const resultsDisplay = document.getElementById('results-display');
        const totalCaloriesEl = document.getElementById('total-calories');
        const ingredientsListEl = document.getElementById('ingredients-list');
        const disclaimerEl = document.getElementById('disclaimer');
        const resetBtn = document.getElementById('reset-btn');

        // Camera elements
        const cameraBtn = document.getElementById('camera-btn');
        const cameraModal = document.getElementById('camera-modal');
        const cameraStream = document.getElementById('camera-stream');
        const cameraCanvas = document.getElementById('camera-canvas');
        const captureBtn = document.getElementById('capture-btn');
        const closeCameraBtn = document.getElementById('close-camera-btn');
        let currentStream = null;

        // Voice elements
        const voiceBtn = document.getElementById('voice-btn');
        const voiceModal = document.getElementById('voice-modal');
        const closeVoiceBtn = document.getElementById('close-voice-btn');
        const micAnimation = document.getElementById('mic-animation');
        const voiceStatus = document.getElementById('voice-status');
        const transcriptEl = document.getElementById('transcript');
        const interimTranscriptEl = document.getElementById('interim-transcript');
        const voiceSupportWarning = document.getElementById('voice-support-warning');

        // Nav elements
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        const hamburgerIcon = document.getElementById('hamburger-icon');
        const closeIcon = document.getElementById('close-icon');

        let file = null;
        let recognition;
        let recognition_timeout;
        let final_transcript = '';

        // --- Event Listeners Setup ---
        function setupEventListeners() {
            browseBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                fileInput.click();
            });

            fileInput.addEventListener('change', handleFileSelect);

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, preventDefaults, false);
            });

            ['dragenter', 'dragover'].forEach(eventName => {
                dropZone.addEventListener(eventName, () => dropZone.classList.add('drag-over'), false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, () => dropZone.classList.remove('drag-over'), false);
            });

            dropZone.addEventListener('drop', handleDrop, false);

            removeImageBtn.addEventListener('click', resetToUploadState);
            resetBtn.addEventListener('click', resetToUploadState);
            analyzeBtn.addEventListener('click', handleAnalyzeClick);
            
            cameraBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                openCamera();
            });
            closeCameraBtn.addEventListener('click', closeCamera);
            captureBtn.addEventListener('click', captureImage);
            
            voiceBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                startVoiceRecognition();
            });
            closeVoiceBtn.addEventListener('click', stopVoiceRecognition);

            mobileMenuButton.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
                hamburgerIcon.classList.toggle('hidden');
                closeIcon.classList.toggle('hidden');
            });
        }

        // --- Speech Recognition Setup ---
        function setupSpeechRecognition() {
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            if (SpeechRecognition) {
                recognition = new SpeechRecognition();
                recognition.continuous = true;
                recognition.interimResults = true;
                recognition.lang = 'en-US';

                recognition.onresult = handleRecognitionResult;
                recognition.onend = handleRecognitionEnd;
                recognition.onerror = handleRecognitionError;
            } else {
                console.warn("Speech Recognition not supported in this browser.");
                voiceBtn.disabled = true;
                voiceBtn.classList.add('opacity-50', 'cursor-not-allowed');
                voiceSupportWarning.innerHTML = `<p class="text-xs text-red-500 mt-2">Voice input not supported in your browser.</p>`;
            }
        }

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        // --- File Handling ---
        function handleFileSelect(event) {
            const files = event.target.files;
            if (files.length > 0) handleFile(files[0]);
        }
        
        function handleDrop(event) {
            const files = event.dataTransfer.files;
            if (files.length > 0) handleFile(files[0]);
        }

        function handleFile(selectedFile) {
            if (selectedFile && selectedFile.type.startsWith('image/')) {
                file = selectedFile;
                const reader = new FileReader();
                reader.onload = (e) => {
                    imagePreview.src = e.target.result;
                    showPreviewState();
                };
                reader.readAsDataURL(file);
            } else {
                alert('Please select an image file (PNG, JPG, WEBP).');
            }
        }

        // --- Camera Handling ---
        async function openCamera() {
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                try {
                    const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } });
                    currentStream = stream;
                    cameraStream.srcObject = stream;
                    cameraModal.classList.remove('hidden');
                } catch (err) {
                    console.error("Error accessing camera: ", err);
                    alert("Could not access camera. Please grant permission and ensure a camera is available.");
                }
            } else {
                alert("Your browser does not support camera access.");
            }
        }

        function closeCamera() {
            if (currentStream) {
                currentStream.getTracks().forEach(track => track.stop());
            }
            cameraModal.classList.add('hidden');
            cameraStream.srcObject = null;
        }

        function captureImage() {
            const context = cameraCanvas.getContext('2d');
            cameraCanvas.width = cameraStream.videoWidth;
            cameraCanvas.height = cameraStream.videoHeight;
            context.drawImage(cameraStream, 0, 0, cameraCanvas.width, cameraCanvas.height);
            
            cameraCanvas.toBlob(blob => {
                const capturedFile = new File([blob], `capture-${Date.now()}.jpg`, { type: 'image/jpeg' });
                handleFile(capturedFile);
                closeCamera();
            }, 'image/jpeg');
        }
        
        // --- Voice Recognition Handling ---
        function startVoiceRecognition() {
            if (!recognition) return;
            final_transcript = '';
            transcriptEl.textContent = '';
            interimTranscriptEl.textContent = '';
            voiceStatus.textContent = 'Listening...';
            micAnimation.classList.add('mic-listening');
            voiceModal.classList.remove('hidden');
            recognition.start();
        }

        function stopVoiceRecognition() {
            if (!recognition) return;
            recognition.stop();
            voiceModal.classList.add('hidden');
            micAnimation.classList.remove('mic-listening');
        }

        function handleRecognitionResult(event) {
            clearTimeout(recognition_timeout);
            let interim_transcript = '';
            for (let i = event.resultIndex; i < event.results.length; ++i) {
                if (event.results[i].isFinal) {
                    final_transcript += event.results[i][0].transcript;
                } else {
                    interim_transcript += event.results[i][0].transcript;
                }
            }
            transcriptEl.textContent = final_transcript;
            interimTranscriptEl.textContent = interim_transcript;
            
            recognition_timeout = setTimeout(() => {
                recognition.stop();
            }, 2500); // Stop after 2.5 seconds of silence
        }

        function handleRecognitionEnd() {
            stopVoiceRecognition();
            if (final_transcript.trim()) {
                handleVoiceAnalyze(final_transcript);
            }
        }

        function handleRecognitionError(event) {
            console.error('Speech recognition error', event.error);
            voiceStatus.textContent = `Error: ${event.error}`;
            micAnimation.classList.remove('mic-listening');
        }


        // --- State Management ---
        function showPreviewState() {
            uploadSection.classList.add('hidden');
            previewSection.classList.remove('hidden');
            resultsSection.classList.add('hidden');
            hideError();
        }
        
        function resetToUploadState() {
            file = null;
            fileInput.value = '';
            imagePreview.src = '#';
            uploadSection.classList.remove('hidden');
            previewSection.classList.add('hidden');
            resultsSection.classList.add('hidden');
            resultsDisplay.classList.add('hidden');
            hideError();
            if(recognition) stopVoiceRecognition();
        }

        function showLoadingState() {
            resultsSection.classList.remove('hidden');
            loadingState.classList.remove('hidden');
            resultsDisplay.classList.add('hidden');
            hideError();
        }

        function hideLoadingState() {
            loadingState.classList.add('hidden');
        }

        function showError(message) {
            errorText.textContent = message;
            errorMessage.classList.remove('hidden');
            resultsSection.classList.remove('hidden'); // Ensure results section is visible for error
        }

        function hideError() {
            errorMessage.classList.add('hidden');
        }

        // --- Analysis and API Calls ---
        async function handleAnalyzeClick() {
            if (!file) {
                showError("No file selected.");
                return;
            }
            
            analyzeBtn.disabled = true;
            analyzeBtn.innerHTML = `<div class="loader !w-6 !h-6 !border-2 mr-2"></div> Analyzing...`;
            showLoadingState();

            try {
                const base64ImageData = await toBase64(file);
                const systemPrompt = "You are a nutrition expert. Your task is to analyze an image of a meal and provide a detailed calorie and nutritional breakdown.";
                const userPrompt = `Analyze the food items in this image. Provide a JSON response...`; // Abridged for clarity
                const payload = createApiPayload(systemPrompt, {
                     inlineData: { mimeType: file.type, data: base64ImageData },
                     text: userPrompt
                });
                const result = await callGeminiApi(payload);
                handleApiResponse(result);

            } catch (error) {
                console.error("Analysis failed:", error);
                showError("An unexpected error occurred during image analysis.");
            } finally {
                hideLoadingState();
                analyzeBtn.disabled = false;
                analyzeBtn.innerHTML = `... Analyze Meal`; // SVG Icon abridged
            }
        }

        async function handleVoiceAnalyze(text) {
            uploadSection.classList.add('hidden');
            showLoadingState();

            try {
                 const systemPrompt = "You are a nutrition expert. Your task is to analyze a text description of a meal and provide a detailed calorie and nutritional breakdown.";
                 const userPrompt = `Analyze the following meal description: "${text}". Provide a JSON response...`; // Abridged for clarity
                 const payload = createApiPayload(systemPrompt, { text: userPrompt });
                 const result = await callGeminiApi(payload);
                 handleApiResponse(result);

            } catch (error) {
                console.error("Analysis failed:", error);
                showError("An unexpected error occurred during voice analysis.");
            } finally {
                hideLoadingState();
            }
        }
        
        function handleApiResponse(result) {
            if (result.error) {
                showError(result.error);
            } else if (!result.ingredients || result.ingredients.length === 0) {
                 showError("Could not identify any food items. Please try a clearer description or image.");
            } else {
                displayResults(result);
            }
        }
        
        const toBase64 = (file) => new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result.split(',')[1]);
            reader.onerror = error => reject(error);
        });
        
        function createApiPayload(systemPrompt, userPart) {
            const userPromptText = userPart.text || `Analyze the food items in this image. Provide a JSON response with a list of ingredients, their estimated calorie count, and macronutrient breakdown (protein, carbs, fat in grams). The JSON should have a key 'ingredients' which is an array of objects, each object having 'name' (string), 'calories' (number), 'protein_g' (number), 'carbs_g' (number), and 'fat_g' (number). Also include 'total_calories', 'total_protein_g', 'total_carbs_g', 'total_fat_g' keys (as numbers) and a 'disclaimer' key (as a string). If the input is not food-related, return a JSON object with an 'error' key explaining the issue. Be as accurate as possible but acknowledge the estimate.`;
            const parts = [{ text: userPromptText }];
            if (userPart.inlineData) {
                parts.push({ inlineData: userPart.inlineData });
            }

            return {
                systemInstruction: { parts: [{ text: systemPrompt }] },
                contents: [{ parts }],
                generationConfig: {
                    temperature: 0,
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "OBJECT",
                        properties: {
                            ingredients: {
                                type: "ARRAY",
                                items: {
                                    type: "OBJECT",
                                    properties: {
                                        name: { type: "STRING" },
                                        calories: { type: "NUMBER" },
                                        protein_g: { type: "NUMBER" },
                                        carbs_g: { type: "NUMBER" },
                                        fat_g: { type: "NUMBER" }
                                    },
                                    required: ["name", "calories", "protein_g", "carbs_g", "fat_g"]
                                }
                            },
                            total_calories: { type: "NUMBER" },
                            total_protein_g: { type: "NUMBER" },
                            total_carbs_g: { type: "NUMBER" },
                            total_fat_g: { type: "NUMBER" },
                            disclaimer: { type: "STRING" },
                            error: { type: "STRING" }
                        },
                        required: ["ingredients", "total_calories", "total_protein_g", "total_carbs_g", "total_fat_g", "disclaimer"]
                    }
                }
            };
        }

        async function callGeminiApi(payload) {
            const apiKey = ""; // API Key is not needed for this model
            const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
            
            let retries = 3;
            let delay = 1000;

            for (let i = 0; i < retries; i++) {
                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (response.ok) {
                        const result = await response.json();
                        const candidate = result?.candidates?.[0];
                        const part = candidate?.content?.parts?.[0];

                        if (!part || !part.text) {
                            console.error("Invalid API response structure:", result);
                            throw new Error("API returned an invalid or empty response.");
                        }
                        
                        const jsonText = part.text;
                        return JSON.parse(jsonText);
                    } else {
                        throw new Error(`API request failed with status ${response.status}`);
                    }
                } catch (error) {
                    console.error(`Attempt ${i + 1} failed:`, error);
                    if (i < retries - 1) {
                        await new Promise(res => setTimeout(res, delay));
                        delay *= 2; // Exponential backoff
                    } else {
                        throw error;
                    }
                }
            }
        }
        
        function displayResults(data) {
            resultsSection.classList.remove('hidden');
            resultsDisplay.classList.remove('hidden');
            previewSection.classList.add('hidden');
            uploadSection.classList.add('hidden');
            loadingState.classList.add('hidden');
            
            totalCaloriesEl.textContent = Math.round(data.total_calories || 0);
            document.getElementById('total-protein').textContent = `${Math.round(data.total_protein_g || 0)}g`;
            document.getElementById('total-carbs').textContent = `${Math.round(data.total_carbs_g || 0)}g`;
            document.getElementById('total-fat').textContent = `${Math.round(data.total_fat_g || 0)}g`;
            disclaimerEl.textContent = data.disclaimer;
            
            ingredientsListEl.innerHTML = '';
            
            data.ingredients.forEach(item => {
                const li = document.createElement('li');
                li.className = 'py-4';
                li.innerHTML = `
                    <div class="flex items-center space-x-4">
                        <div class="flex-1 min-w-0">
                            <p class="text-md font-medium text-gray-900 truncate">${item.name}</p>
                            <p class="text-sm text-gray-500">
                                P: ${Math.round(item.protein_g || 0)}g &bull; C: ${Math.round(item.carbs_g || 0)}g &bull; F: ${Math.round(item.fat_g || 0)}g
                            </p>
                        </div>
                        <div class="inline-flex items-center text-lg font-semibold text-gray-900">
                            ${Math.round(item.calories || 0)} kcal
                        </div>
                    </div>
                `;
                ingredientsListEl.appendChild(li);
            });
        }
        
        // --- Initialize App ---
        document.addEventListener('DOMContentLoaded', () => {
            setupEventListeners();
            setupSpeechRecognition();
        });

    </script>
</body>
</html>